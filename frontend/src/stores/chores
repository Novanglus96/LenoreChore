import { defineStore } from 'pinia'
import axios from "axios"

// You can name the return value of `defineStore()` anything you want,
// but it's best to use the name of the store and surround it with `use`
// and `Store` (e.g. `useUserStore`, `useCartStore`, `useProductStore`)
// the first argument is a unique id of the store across your application
export const useChoreStore = defineStore('chore', {
  state: () => ({ 
    areas: [],
    chores: [],
    users: [],
    units: ['day(s)', 'week(s)', 'month(s)', 'year(s)'],
  }),
    getters: {
      getAreas(state){
        return state.areas
      },
      getChores(state){
        state.chores.forEach((chore) => {
          const areaid = chore.area -1
          const userid = chore.assignee -1
          chore.repeat = chore.intervalNumber + " " + chore.unit
          chore.area = state.areas[areaid].area_name
          chore.areaicon = state.areas[areaid].area_icon
          if (userid >= 0) {
            chore.assignee = state.users[userid].first_name + ' ' + state.users[userid].last_name
            chore.assignee_icon = "mdi-radiobox-marked"
            chore.isAssigned = true
          } else {
            chore.assignee = "Unassigned"
            chore.assignee_icon = "mdi-radiobox-blank"
            chore.isAssigned = false
          }
        })

        return state.chores
      },
      getUsers(state){
        return state.users
      }
    },
    actions: {
      async fetchAreas() {
        try {
          const data = await axios.get('https://chores.danielleandjohn.love/api/areas/')
          this.areas = data.data
        }
        catch (error) {
          alert(error)
          console.log(error)
        }
      },
      async fetchChores() {
        try {
          const data = await axios.get('https://chores.danielleandjohn.love/api/chores/')
          this.chores = data.data
        }
        catch (error) {
          alert(error)
          console.log(error)
        }
      },
      async fetchUsers() {
        try {
          const data = await axios.get('https://chores.danielleandjohn.love/api/users/')
          this.users = data.data
        }
        catch (error) {
          alert(error)
          console.log(error)
        }
      },
      async addArea(area) {
        try {
          // Make a POST request to your API endpoint
          const response = await axios.post('https://chores.danielleandjohn.love/api/areas/', area);

          // Add area to local storage
          //this.areas.push(area);
          this.fetchAreas();

          // Handle the response here (e.g., show a success message)
          console.log('Response:', response.data);
        } catch (error) {
          // Handle errors (e.g., show an error message)
          console.log('Error:', error);
        }
      },
      async addChore(chore) {
        try {
          // Make a POST request to your API endpoint
          const response = await axios.post('https://chores.danielleandjohn.love/api/chores/', chore);

          // Add area to local storage
          //this.chores.push(chore);
          this.fetchChores();

          // Handle the response here (e.g., show a success message)
          console.log('Response:', response.data);
          console.log('Request:', chore)
        } catch (error) {
          // Handle errors (e.g., show an error message)
          console.log('Error:', error);
        }
      },
    },
    persist: true,
  })