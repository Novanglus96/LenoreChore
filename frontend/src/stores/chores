import { defineStore } from "pinia";
import axios from "axios";

// You can name the return value of `defineStore()` anything you want,
// but it's best to use the name of the store and surround it with `use`
// and `Store` (e.g. `useUserStore`, `useCartStore`, `useProductStore`)
// the first argument is a unique id of the store across your application
export const useChoreStore = defineStore("chore", {
  state: () => ({
    snackbarText: "",
    snackbarColor: "",
    snackbar: false,
    snackbarTimeout: 1500,
    chores: [],
    users: [],
    historyitems: [],
    weeklytotals: [],
    units: ["day(s)", "week(s)", "month(s)", "year(s)"],
    intervals: [
      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
      22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    ],
    dayfilter: [
      {
        name: "Due Today",
        days: 0,
      },
      {
        name: "Due Tomorrow",
        days: 1,
      },
      {
        name: "Due within 3 Days",
        days: 3,
      },
      {
        name: "Due within 1 Week",
        days: 7,
      },
    ],
    assigneefilter: [],
    areaicons: [
      "mdi-fridge",
      "mdi-stove",
      "mdi-faucet",
      "mdi-toilet",
      "mdi-paper-roll",
      "mdi-sofa",
      "mdi-television",
      "mdi-table-chair",
      "mdi-table-furniture",
      "mdi-bed",
      "mdi-dresser",
      "mdi-cradle",
      "mdi-teddy-bear",
      "mdi-desk",
      "mdi-desk-lamp",
      "mdi-table-picnic",
      "mdi-car-back",
      "mdi-tree",
      "mdi-tumble-dryer",
      "mdi-washing-machine",
    ],
    med_thresh: 0,
    high_thresh: 10,
    vacation_mode: false,
    filters: {
      inactive: false,
      timeframe: null,
      assignee_id: null,
      area_id: null,
    },
  }),
  getters: {
    getAssigneeFilter(state) {
      const assigneefilter = [];
      state.users.forEach(user => {
        const temp = {};
        temp.fullname = user.fullname;
        temp.value = user.id;
        assigneefilter.push(temp);
      });
      const tempall = {
        fullname: "All",
        value: 0,
      };
      assigneefilter.unshift(tempall);
      return assigneefilter;
    },
    getDayFilter(state) {
      return state.dayfilter;
    },
    getFilteredChores: state => (area, days, assignee, showDisabled) => {
      let tempChores = state.chores;

      if (showDisabled == false) {
        tempChores = tempChores.filter(chore => {
          return chore.active == true;
        });
      }

      if (area != "All" && area) {
        tempChores = tempChores.filter(chore => {
          return chore.area.area_name == area;
        });
      }

      const filterAssignees = item => {
        if (!item.assignee) {
          return false;
        } else {
          if (item.assignee.id == assignee) {
            return true;
          } else {
            return false;
          }
        }
      };

      if (days != -99 && days != null) {
        tempChores = tempChores.filter(chore => {
          return chore.duedays <= days;
        });
      }

      if (assignee != 0 && assignee) {
        tempChores = tempChores.filter(filterAssignees);
      }

      tempChores.forEach(chore => {
        chore.repeat = chore.intervalNumber + " " + chore.unit;
        if (chore.assignee) {
          chore.isAssigned = true;
        } else {
          chore.isAssigned = false;
        }
        if (chore.duedays < 0) {
          chore.isOverdue = true;
        } else {
          chore.isOverdue = false;
        }
        if (chore.dirtiness <= state.med_thresh) {
          chore.dirtycolor = "success";
        } else if (
          chore.dirtiness > state.med_thresh &&
          chore.dirtiness <= state.high_thresh
        ) {
          chore.dirtycolor = "warning";
        } else if (chore.dirtiness > state.high_thresh) {
          chore.dirtycolor = "error";
        }
      });

      return tempChores;
    },
    getChores(state) {
      state.chores.forEach(chore => {
        chore.repeat = chore.intervalNumber + " " + chore.unit;
        if (chore.assignee) {
          chore.isAssigned = true;
        } else {
          chore.isAssigned = false;
        }
        if (chore.duedays < 0) {
          chore.isOverdue = true;
        } else {
          chore.isOverdue = false;
        }
        if (chore.dirtiness <= state.med_thresh) {
          chore.dirtycolor = "success";
        } else if (
          chore.dirtiness > state.med_thresh &&
          chore.dirtiness <= state.high_thresh
        ) {
          chore.dirtycolor = "warning";
        } else if (chore.dirtiness > state.high_thresh) {
          chore.dirtycolor = "error";
        }
      });

      return state.chores;
    },
    getUsers(state) {
      return state.users;
    },
    getHistoryItems(state) {
      return state.historyitems;
    },
    getWeeklyTotals(state) {
      return state.weeklytotals;
    },
    getHighThresh(state) {
      return state.high_thresh;
    },
    getMedThresh(state) {
      return state.med_thresh;
    },
    getVacationMode(state) {
      return state.vacation_mode;
    },
  },
  actions: {
    async showSnackbar(text, color) {
      this.snackbarText = text;
      this.snackbarColor = color;
      this.snackbar = true;
    },
    async disableVacationMode() {
      try {
        // Make a POST request to your API endpoint
        const response = await axios.post(
          "/api/options/disable_vacation_mode/",
        );

        // Add area to local storage
        //this.areas.push(area);
        this.fetchAll();
      } catch (error) {
        // Handle errors (e.g., show an error message)
        console.log("Error:", error);
      }
    },
    async enableVacationMode() {
      try {
        // Make a POST request to your API endpoint
        const response = await axios.post("/api/options/enable_vacation_mode/");

        // Add area to local storage
        //this.areas.push(area);
        this.fetchAll();
      } catch (error) {
        // Handle errors (e.g., show an error message)
        console.log("Error:", error);
      }
    },
  },
});
