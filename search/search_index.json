{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>     A simple chore app.      Explore the docs \u00bb Report Bug     \u00b7     Request Feature </p>"},{"location":"#about-the-project","title":"About The Project","text":"<p>LenoreChore is a smart, customizable chore management app. Designed for households or small groups, LenoreChore helps you keep track of tasks, assign chores efficiently, and maintain a consistent routine\u2014even when life gets busy.</p> <p>I originally built LenoreChore for my wife and me to simplify our weekly chore routine. After our daughter was born, I expanded the app to include parent/child user roles so we could introduce responsibility in a fun and manageable way.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\u2705 Custom Areas \u2013 Define and organize chores by specific locations (like rooms or zones) in your home.</li> <li>\ud83d\uddc2\ufe0f Area Grouping \u2013 Group multiple areas for batch management and easier scheduling.</li> <li>\ud83d\udc6a Child/Parent Users \u2013 Support for family-style roles with tailored visibility and controls.</li> <li>\ud83d\udc64 Chore Assignment \u2013 Assign tasks to specific users with clear accountability.</li> <li>\ud83d\udcc8 Chore History Graph \u2013 Visualize completed chores over time to track progress and consistency.</li> <li>\ud83d\udeeb Vacation Mode \u2013 Pause chore assignments when you're away, then resume with your schedule intact.</li> </ul> <p>LenoreChore is built for self-hosting and is fully responsive\u2014mobile- and desktop-friendly out of the box.</p> <p>Whether you're managing your own chores or teaching kids how to contribute around the house, LenoreChore helps bring structure, fairness, and visibility to your daily routines.</p> <p>(back to top)</p>"},{"location":"#built-with","title":"Built With","text":"<p>(back to top)</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Welcome to LenoreChore! This guide will help you set up and run the application using Docker and Docker Compose.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following installed on your system:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"#step-1-create-a-env-file","title":"Step 1: Create a <code>.env</code> File","text":"<p>Create a <code>.env</code> file in the root directory of the project. This file will store environment variables required to run the application. Below is an example of the variables you need to define:</p> <pre><code>DEBUG=0\nSECRET_KEY=mysupersecretkey\nDJANGO_ALLOWED_HOSTS=localhost\nCSRF_TRUSTED_ORIGINS=http://localhost\nSQL_ENGINE=django.db.backends.postgresql\nSQL_DATABASE=LenoreChore\nSQL_USER=LenoreChoreuser\nSQL_PASSWORD=somepassword\nSQL_HOST=db\nSQL_PORT=5432\nDATABASE=postgres\nDJANGO_SUPERUSER_PASSWORD=suepervisorpassword\nDJANGO_SUPERUSER_EMAIL=someone@somewhere.com\nDJANGO_SUPERUSER_USERNAME=supervisor\nVITE_API_KEY=someapikey\nTIMEZONE=America/New_York\n</code></pre> <p>Adjust these values according to your environment and application requirements.</p>"},{"location":"#step-2-create-a-docker-composeyml-file","title":"Step 2: Create a <code>docker-compose.yml</code> File","text":"<p>Create a <code>docker-compose.yml</code> file in the root directory of the project. Below is an example configuration:</p> <pre><code>services:\n  frontend:\n    image: novanglus96/LenoreChore_frontend:latest\n    container_name: LenoreChore_frontend\n    networks:\n      - LenoreChore\n    restart: unless-stopped\n    expose:\n      - 80\n    env_file:\n      - ./.env\n  backend:\n    image: novanglus96/LenoreChore_backend:latest\n    container_name: LenoreChore_backend\n    command: /home/app/web/start.sh\n    volumes:\n      - LenoreChore_static_volume:/home/app/web/staticfiles\n      - LenoreChore_media_volume:/home/app/web/mediafiles\n    expose:\n      - 8000\n    depends_on:\n      - db\n    networks:\n      - LenoreChore\n    env_file:\n      - ./.env\n  db:\n    image: postgres:15\n    container_name: LenoreChore_db\n    volumes:\n      - LenoreChore_postgres_data:/var/lib/postgresql/data/\n    env_file:\n      - ./.env\n    networks:\n      - LenoreChore\n    environment:\n      - POSTGRES_USER=${SQL_USER}\n      - POSTGRES_PASSWORD=${SQL_PASSWORD}\n      - POSTGRES_DB=${SQL_DATABASE}\n  nginx:\n    image: novanglus96/lenoreapps_proxy:latest\n    container_name: LenoreChore_nginx\n    ports:\n      - \"8080:80\"\n    volumes:\n      - LenoreChore_static_volume:/home/app/web/staticfiles\n      - LenoreChore_media_volume:/home/app/web/mediafiles\n    depends_on:\n      - backend\n      - frontend\n    networks:\n      - LenoreChore\n\nnetworks:\n  LenoreChore:\n\nvolumes:\n  LenoreChore_postgres_data:\n    external: true\n  LenoreChore_static_volume:\n    external: true\n  LenoreChore_media_volume:\n    external: true\n</code></pre>"},{"location":"#step-3-run-the-application","title":"Step 3: Run the Application","text":"<ol> <li>Start the services:</li> </ol> <p><code>bash    docker compose up -d</code></p> <ol> <li>Access the application in your browser at <code>http://localhost:8080</code>.</li> </ol>"},{"location":"#notes","title":"Notes","text":"<ul> <li>Adjust exposed ports as needed for your environment.</li> <li>If you encounter any issues, ensure your <code>.env</code> file has the correct values and your Docker and Docker Compose installations are up to date.</li> </ul> <p>Enjoy using LenoreChore!</p> <p>(back to top)</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[ ] v1.3 Release<ul> <li>[ ] Demo Data</li> </ul> </li> </ul> <p>See the open issues for a full list of proposed features (and known issues).</p> <p>(back to top)</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.</p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol> <p>(back to top)</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE.txt</code> for more information.</p> <p>(back to top)</p>"},{"location":"#support","title":"Support","text":"<p>Or</p> <p> </p>"},{"location":"#contact","title":"Contact","text":"<p>John Adams - Lenore.Apps@gmail.com</p> <p>Project Link: https://github.com/Novanglus96/LenoreChore</p> <p>(back to top)</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>A heartfelt thanks to our Patrons for their generous support! Your contributions help us maintain and improve this project.</p>"},{"location":"#thank-you-to-our-supporters","title":"\u2b50 Thank You to Our Supporters:","text":"<p>Want to see your name here? Support us on Patreon to join our amazing community and shape the future of LenoreChore!</p> <p>(back to top)</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#customuser","title":"CustomUser","text":""},{"location":"api/#views","title":"Views","text":""},{"location":"api/#backend.api.list_users","title":"<code>list_users(request)</code>","text":"<p>The function <code>list_users</code> retrieves a list of CustomUser objects.</p> Endpoint <ul> <li>Path: <code>/api/v2/users</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>List[CustomUserSchema]</code> <p>List of CustomUser objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/users\", response=List[CustomUserSchema])\ndef list_users(request):\n    \"\"\"\n    The function `list_users` retrieves a list of CustomUser objects.\n\n    Endpoint:\n        - **Path**: `/api/v2/users`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (List[CustomUserSchema]): List of CustomUser objects.\n    \"\"\"\n    qs = CustomUser.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.me","title":"<code>me(request)</code>","text":"<p>The function <code>me</code> retrieves the CustomUser object of the logged in user.</p> Endpoint <ul> <li>Path: <code>/api/v2/me</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>CustomUserSchema</code> <p>The CustomUser object of the logged in user.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/me\", response=CustomUserSchema)\ndef me(request):\n    \"\"\"\n    The function `me` retrieves the CustomUser object of the logged in user.\n\n    Endpoint:\n        - **Path**: `/api/v2/me`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (CustomUserSchema): The CustomUser object of the logged in user.\n    \"\"\"\n    return request.user\n</code></pre>"},{"location":"api/#backend.api.TokenAuth","title":"<code>TokenAuth</code>","text":"Source code in <code>backend/backend/api.py</code> <pre><code>class TokenAuth(HttpBearer):\n    def authenticate(self, request, token):\n        \"\"\"\n        The function `authenticate` authenticates a user.\n\n        Args:\n            self ():\n            request ():\n            token ():\n\n        Returns:\n            user (token): Returns a user token.\n        \"\"\"\n        try:\n            user = default_token_generator.get_user(token)\n        except Exception as e:\n            raise HttpError(401, f\"Invalid token: {str(e)}\")\n        return user\n</code></pre>"},{"location":"api/#backend.api.TokenAuth.authenticate","title":"<code>authenticate(request, token)</code>","text":"<p>The function <code>authenticate</code> authenticates a user.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> required <code>request</code> required <code>token</code> required <p>Returns:</p> Name Type Description <code>user</code> <code>token</code> <p>Returns a user token.</p> Source code in <code>backend/backend/api.py</code> <pre><code>def authenticate(self, request, token):\n    \"\"\"\n    The function `authenticate` authenticates a user.\n\n    Args:\n        self ():\n        request ():\n        token ():\n\n    Returns:\n        user (token): Returns a user token.\n    \"\"\"\n    try:\n        user = default_token_generator.get_user(token)\n    except Exception as e:\n        raise HttpError(401, f\"Invalid token: {str(e)}\")\n    return user\n</code></pre>"},{"location":"api/#backend.api.login_user","title":"<code>login_user(request, payload)</code>","text":"<p>The function <code>login_user</code> logs in a user.</p> Endpoint <ul> <li>Path: <code>/api/v2/login</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>payload</code> <code>LoginSchema</code> <p>A username and password.</p> required <p>Returns:</p> Type Description <code>object</code> <p>Returns a user object with token.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@router.post(\"/login\")\ndef login_user(request, payload: LoginSchema):\n    \"\"\"\n    The function `login_user` logs in a user.\n\n    Endpoint:\n        - **Path**: `/api/v2/login`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        payload (LoginSchema): A username and password.\n\n    Returns:\n        (object): Returns a user object with token.\n    \"\"\"\n    username = payload.username\n    password = payload.password\n\n    user = authenticate(request, username=username, password=password)\n    if user:\n        login(request, user)\n\n        # Retrieve or create a token for the authenticated user\n        token = default_token_generator.make_token(user)\n\n        return {\n            \"token\": token,\n            \"firstname\": user.first_name,\n            \"lastname\": user.last_name,\n            \"email\": user.email,\n            \"isAdmin\": user.is_superuser,\n            \"male\": user.male,\n            \"id\": user.id,\n            \"user_color\": user.user_color,\n            \"groups\": [group.id for group in user.groups.all()],\n        }\n    else:\n        raise HttpError(401, \"Invalid credentials\")\n</code></pre>"},{"location":"api/#backend.api.logout_user","title":"<code>logout_user(request)</code>","text":"<p>The function <code>logout_user</code> logs out.</p> Endpoint <ul> <li>Path: <code>/api/v2/logout</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>detail: Logout successful</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@router.post(\"/logout\")\ndef logout_user(request):\n    \"\"\"\n    The function `logout_user` logs out.\n\n    Endpoint:\n        - **Path**: `/api/v2/logout`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (str): Returns `detail: Logout successful` if successful.\n    \"\"\"\n    # Log the user out\n    logout(request)\n    return {\"detail\": \"Logout successful\"}\n</code></pre>"},{"location":"api/#schemas","title":"Schemas","text":""},{"location":"api/#backend.api.LoginSchema","title":"<code>LoginSchema</code>","text":"<p>Schema to represent a LoginSchema.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>Username string.</p> <code>password</code> <code>str</code> <p>Password string.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class LoginSchema(Schema):\n    \"\"\"\n    Schema to represent a LoginSchema.\n\n    Attributes:\n        username (str): Username string.\n        password (str): Password string.\n    \"\"\"\n\n    username: str\n    password: str\n</code></pre>"},{"location":"api/#backend.api.LoginUserSchema","title":"<code>LoginUserSchema</code>","text":"<p>Schema to represent a LoginUserSchema.</p> <p>Attributes:</p> Name Type Description <code>email</code> <code>str</code> <p>User email.</p> <code>profile_picture</code> <code>str</code> <p>Path to user picutre. Default=None.</p> <code>male</code> <code>bool</code> <p>Toggle if male or not.</p> <code>user_color</code> <code>str</code> <p>Hex value of a user color.</p> <code>first_name</code> <code>str</code> <p>User first name.</p> <code>last_name</code> <code>str</code> <p>User last name.</p> <code>fullname</code> <code>str</code> <p>Full name of user.</p> <code>is_superuser</code> <code>bool</code> <p>Toggle if user is superuser.</p> <code>is_staff</code> <code>bool</code> <p>Toggle if user is staff.</p> <code>is_active</code> <code>bool</code> <p>Toggle if user is active.</p> <code>groups</code> <code>List[int]</code> <p>List of group ids user belongs to.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class LoginUserSchema(Schema):\n    \"\"\"\n    Schema to represent a LoginUserSchema.\n\n    Attributes:\n        email (str): User email.\n        profile_picture (str): Path to user picutre. Default=None.\n        male (bool): Toggle if male or not.\n        user_color (str): Hex value of a user color.\n        first_name (str): User first name.\n        last_name (str): User last name.\n        fullname (str): Full name of user.\n        is_superuser (bool): Toggle if user is superuser.\n        is_staff (bool): Toggle if user is staff.\n        is_active (bool): Toggle if user is active.\n        groups (List[int]): List of group ids user belongs to.\n    \"\"\"\n\n    email: str\n    profile_picture: str = None\n    male: bool\n    user_color: str\n    first_name: str\n    last_name: str\n    fullname: str\n    is_superuser: bool\n    is_staff: bool\n    is_active: bool\n    groups: List[int]\n</code></pre>"},{"location":"api/#backend.api.CustomUserSchema","title":"<code>CustomUserSchema</code>","text":"<p>Schema to represent a CustomUserSchema.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the user.</p> <code>email</code> <code>str</code> <p>Email of the user.</p> <code>profile_picture</code> <code>str</code> <p>Path to the user profile picture. Default=None.</p> <code>male</code> <code>bool</code> <p>Toggle if user is male.</p> <code>user_color</code> <code>str</code> <p>Hex value of a user color.</p> <code>first_name</code> <code>str</code> <p>User first name.</p> <code>last_name</code> <code>str</code> <p>User last name.</p> <code>fullname</code> <code>str</code> <p>Full name of user.</p> <code>is_superuser</code> <code>bool</code> <p>Toggle if user is superuser.</p> <code>is_staff</code> <code>bool</code> <p>Toggle if user is staff.</p> <code>is_active</code> <code>bool</code> <p>Toggle if user is active.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class CustomUserSchema(Schema):\n    \"\"\"\n    Schema to represent a CustomUserSchema.\n\n    Attributes:\n        id (int): ID of the user.\n        email (str): Email of the user.\n        profile_picture (str): Path to the user profile picture. Default=None.\n        male (bool): Toggle if user is male.\n        user_color (str): Hex value of a user color.\n        first_name (str): User first name.\n        last_name (str): User last name.\n        fullname (str): Full name of user.\n        is_superuser (bool): Toggle if user is superuser.\n        is_staff (bool): Toggle if user is staff.\n        is_active (bool): Toggle if user is active.\n    \"\"\"\n\n    id: int\n    email: str\n    profile_picture: str = None\n    male: bool\n    user_color: str\n    first_name: str\n    last_name: str\n    fullname: str\n    is_superuser: bool\n    is_staff: bool\n    is_active: bool\n</code></pre>"},{"location":"api/#areagroup","title":"AreaGroup","text":""},{"location":"api/#views_1","title":"Views","text":""},{"location":"api/#backend.api.create_areagroup","title":"<code>create_areagroup(request, payload)</code>","text":"<p>The function <code>create_areagroup</code> creates an AreaGroup object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areagroups</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>payload</code> <code>AreaGroupIn</code> <p>An AreaGroup object to create.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The ID of the newly created AreaGroup object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/areagroups\")\ndef create_areagroup(request, payload: AreaGroupIn):\n    \"\"\"\n    The function `create_areagroup` creates an AreaGroup object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areagroups`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        payload (AreaGroupIn): An AreaGroup object to create.\n\n    Returns:\n        (int): The ID of the newly created AreaGroup object.\n    \"\"\"\n    areagroup = AreaGroup.objects.create(**payload.dict())\n    return {\"id\": areagroup.id}\n</code></pre>"},{"location":"api/#backend.api.get_areagroup","title":"<code>get_areagroup(request, areagroup_id)</code>","text":"<p>The function <code>get_areagroup</code> retrieves an AreaGroup object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areagroups/{areagroup_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>areagroup_id</code> <code>int</code> <p>ID of the AreaGroup object to retreive.</p> required <p>Returns:</p> Type Description <code>AreaGroupOut</code> <p>The AreaGroup object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/areagroups/{areagroup_id}\", response=AreaGroupOut)\ndef get_areagroup(request, areagroup_id: int):\n    \"\"\"\n    The function `get_areagroup` retrieves an AreaGroup object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areagroups/{areagroup_id}`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        areagroup_id (int): ID of the AreaGroup object to retreive.\n\n    Returns:\n        (AreaGroupOut): The AreaGroup object.\n    \"\"\"\n    areagroup = get_object_or_404(AreaGroup, id=areagroup_id)\n    return areagroup\n</code></pre>"},{"location":"api/#backend.api.list_areagroups","title":"<code>list_areagroups(request)</code>","text":"<p>The function <code>list_areagroups</code> retrieves a list of AreaGroup objects.</p> Endpoint <ul> <li>Path: <code>/api/v2/areagroups</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>List[AreaGroupOut]</code> <p>List of AreaGroup objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/areagroups\", response=List[AreaGroupOut])\ndef list_areagroups(request):\n    \"\"\"\n    The function `list_areagroups` retrieves a list of AreaGroup objects.\n\n    Endpoint:\n        - **Path**: `/api/v2/areagroups`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (List[AreaGroupOut]): List of AreaGroup objects.\n    \"\"\"\n    qs = AreaGroup.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_areagroup","title":"<code>update_areagroup(request, areagroup_id, payload)</code>","text":"<p>The function <code>update_areagroup</code> updates a given AreaGroup object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areagroups/{areagroup_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>areagroup_id</code> <code>int</code> <p>ID of the AreaGroup object to update.</p> required <code>payload</code> <code>AreaGroupIn</code> <p>AreaGroup object with updates to apply.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/areagroups/{areagroup_id}\")\ndef update_areagroup(request, areagroup_id: int, payload: AreaGroupIn):\n    \"\"\"\n    The function `update_areagroup` updates a given AreaGroup object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areagroups/{areagroup_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        areagroup_id (int): ID of the AreaGroup object to update.\n        payload (AreaGroupIn): AreaGroup object with updates to apply.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    areagroup = get_object_or_404(AreaGroup, id=areagroup_id)\n    areagroup.group_name = payload.group_name\n    areagroup.group_order = payload.group_order\n    areagroup.group_color = payload.group_color\n    areagroup.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_areagroup","title":"<code>delete_areagroup(request, areagroup_id)</code>","text":"<p>The function <code>delete_areagroup</code> deletes a given AreaGroup object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areagroups/{areagroup_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>areagroup_id</code> <code>int</code> <p>ID of the AreaGroup object to delete.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/areagroups/{areagroup_id}\")\ndef delete_areagroup(request, areagroup_id: int):\n    \"\"\"\n    The function `delete_areagroup` deletes a given AreaGroup object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areagroups/{areagroup_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        areagroup_id (int): ID of the AreaGroup object to delete.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    areagroup = get_object_or_404(AreaGroup, id=areagroup_id)\n    areagroup.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_1","title":"Schemas","text":""},{"location":"api/#backend.api.AreaGroupIn","title":"<code>AreaGroupIn</code>","text":"<p>Schema to represent an AreaGroupIn.</p> <p>Attributes:</p> Name Type Description <code>group_name</code> <code>str</code> <p>Area group name.</p> <code>group_order</code> <code>int</code> <p>Area group order index.</p> <code>group_color</code> <code>str</code> <p>Hex value of area group color.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AreaGroupIn(Schema):\n    \"\"\"\n    Schema to represent an AreaGroupIn.\n\n    Attributes:\n        group_name (str): Area group name.\n        group_order (int): Area group order index.\n        group_color (str): Hex value of area group color.\n    \"\"\"\n\n    group_name: str\n    group_order: int\n    group_color: str\n</code></pre>"},{"location":"api/#backend.api.AreaGroupOut","title":"<code>AreaGroupOut</code>","text":"<p>Schema to represent an AreaGroupOut.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of area group.</p> <code>group_name</code> <code>str</code> <p>Area group name.</p> <code>group_order</code> <code>int</code> <p>Area group order index.</p> <code>group_color</code> <code>str</code> <p>Hex value of area group color.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AreaGroupOut(Schema):\n    \"\"\"\n    Schema to represent an AreaGroupOut.\n\n    Attributes:\n        id (int): ID of area group.\n        group_name (str): Area group name.\n        group_order (int): Area group order index.\n        group_color (str): Hex value of area group color.\n    \"\"\"\n\n    id: int\n    group_name: str\n    group_order: int\n    group_color: str\n</code></pre>"},{"location":"api/#area","title":"Area","text":""},{"location":"api/#views_2","title":"Views","text":""},{"location":"api/#backend.api.create_area","title":"<code>create_area(request, payload)</code>","text":"<p>The function <code>create_area</code> creates an Area object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areas</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>payload</code> <code>AreaIn</code> <p>Area Object to create.</p> required <p>Returns:</p> Type Description <code>int</code> <p>ID of the newly created Area object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/areas\")\ndef create_area(request, payload: AreaIn):\n    \"\"\"\n    The function `create_area` creates an Area object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areas`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        payload (AreaIn): Area Object to create.\n\n    Returns:\n        (int): ID of the newly created Area object.\n    \"\"\"\n    area = Area.objects.create(**payload.dict())\n    return {\"id\": area.id}\n</code></pre>"},{"location":"api/#backend.api.get_area","title":"<code>get_area(request, area_id)</code>","text":"<p>The function <code>get_area</code> retrieves an Area object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areas/{area_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>area_id</code> <code>int</code> <p>ID of the Area object to retreive.</p> required <p>Returns:</p> Type Description <code>AreaOut</code> <p>The Area object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/areas/{area_id}\", response=AreaOut)\ndef get_area(request, area_id: int):\n    \"\"\"\n    The function `get_area` retrieves an Area object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areas/{area_id}`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        area_id (int): ID of the Area object to retreive.\n\n    Returns:\n        (AreaOut): The Area object.\n    \"\"\"\n    area = get_object_or_404(Area, id=area_id)\n    return area\n</code></pre>"},{"location":"api/#backend.api.list_areas","title":"<code>list_areas(request)</code>","text":"<p>The function <code>list_areas</code> retrieves a list of Area objects.</p> Endpoint <ul> <li>Path: <code>/api/v2/areas</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>List[AreaOut]</code> <p>List of Area objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/areas\", response=List[AreaOut])\ndef list_areas(request):\n    \"\"\"\n    The function `list_areas` retrieves a list of Area objects.\n\n    Endpoint:\n        - **Path**: `/api/v2/areas`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (List[AreaOut]): List of Area objects.\n    \"\"\"\n    qs = Area.objects.all().order_by(\"group__group_order\", \"area_name\")\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_area","title":"<code>update_area(request, area_id, payload)</code>","text":"<p>The function <code>update_area</code> updates a given Area object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areas/{area_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>area_id</code> <code>int</code> <p>ID of the Area object to update.</p> required <code>payload</code> <code>AreaIn</code> <p>Area object with updates to apply.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/areas/{area_id}\")\ndef update_area(request, area_id: int, payload: AreaIn):\n    \"\"\"\n    The function `update_area` updates a given Area object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areas/{area_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        area_id (int): ID of the Area object to update.\n        payload (AreaIn): Area object with updates to apply.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    area = get_object_or_404(Area, id=area_id)\n    area.area_name = payload.area_name\n    area.area_icon = payload.area_icon\n    area.group_id = payload.group_id\n    area.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_area","title":"<code>delete_area(request, area_id)</code>","text":"<p>The function <code>delete_area</code> deletes a given Area object.</p> Endpoint <ul> <li>Path: <code>/api/v2/areas/{area_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>area_id</code> <code>int</code> <p>ID of the Area object to delete.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/areas/{area_id}\")\ndef delete_area(request, area_id: int):\n    \"\"\"\n    The function `delete_area` deletes a given Area object.\n\n    Endpoint:\n        - **Path**: `/api/v2/areas/{area_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        area_id (int): ID of the Area object to delete.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    area = get_object_or_404(Area, id=area_id)\n    area.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_2","title":"Schemas","text":""},{"location":"api/#backend.api.AreaIn","title":"<code>AreaIn</code>","text":"<p>Schema to represent an AreaIn.</p> <p>Attributes:</p> Name Type Description <code>area_name</code> <code>str</code> <p>Area name.</p> <code>area_icon</code> <code>str</code> <p>Name of area icon.</p> <code>group_id</code> <code>int</code> <p>ID of group object area belongs to.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AreaIn(Schema):\n    \"\"\"\n    Schema to represent an AreaIn.\n\n    Attributes:\n        area_name (str): Area name.\n        area_icon (str): Name of area icon.\n        group_id (int): ID of group object area belongs to.\n    \"\"\"\n\n    area_name: str\n    area_icon: str\n    group_id: int\n</code></pre>"},{"location":"api/#backend.api.AreaOut","title":"<code>AreaOut</code>","text":"<p>Schema to represent an AreaOut.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of an area.</p> <code>area_name</code> <code>str</code> <p>Area name.</p> <code>area_icon</code> <code>str</code> <p>Name of area icon.</p> <code>group_id</code> <code>int</code> <p>ID of group object area belongs to.</p> <code>group</code> <code>AreaGroupOut</code> <p>Group object area belongs to.</p> <code>dirtiness</code> <code>int</code> <p>Percentage of dirtiness for the area.</p> <code>dueCount</code> <code>int</code> <p>Number of chores due for the area.</p> <code>totalCount</code> <code>int</code> <p>Total number of chores for the area.</p> <code>total_dirtiness</code> <code>int</code> <p>Total dirtiness of the area.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AreaOut(Schema):\n    \"\"\"\n    Schema to represent an AreaOut.\n\n    Attributes:\n        id (int): ID of an area.\n        area_name (str): Area name.\n        area_icon (str): Name of area icon.\n        group_id (int): ID of group object area belongs to.\n        group (AreaGroupOut): Group object area belongs to.\n        dirtiness (int): Percentage of dirtiness for the area.\n        dueCount (int): Number of chores due for the area.\n        totalCount (int): Total number of chores for the area.\n        total_dirtiness (int): Total dirtiness of the area.\n    \"\"\"\n\n    id: int\n    area_name: str\n    area_icon: str\n    group_id: int\n    group: AreaGroupOut\n    dirtiness: int\n    dueCount: int\n    totalCount: int\n    total_dirtiness: int\n</code></pre>"},{"location":"api/#month","title":"Month","text":""},{"location":"api/#views_3","title":"Views","text":""},{"location":"api/#schemas_3","title":"Schemas","text":""},{"location":"api/#backend.api.MonthOut","title":"<code>MonthOut</code>","text":"<p>Schema to represent a Month.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the month.</p> <code>name</code> <code>str</code> <p>Name of the month.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class MonthOut(Schema):\n    \"\"\"\n    Schema to represent a Month.\n\n    Attributes:\n        id (int): ID of the month.\n        name (str): Name of the month.\n    \"\"\"\n\n    id: int\n    name: str\n</code></pre>"},{"location":"api/#chore","title":"Chore","text":""},{"location":"api/#views_4","title":"Views","text":""},{"location":"api/#backend.api.create_chore","title":"<code>create_chore(request, payload)</code>","text":"<p>The function <code>create_chore</code> creates a new Chore object.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>payload</code> <code>ChoreIn</code> <p>Chore object to create.</p> required <p>Returns:</p> Type Description <code>int</code> <p>ID of the newly created Chore object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/chores\")\ndef create_chore(request, payload: ChoreIn):\n    \"\"\"\n    The function `create_chore` creates a new Chore object.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        payload (ChoreIn): Chore object to create.\n\n    Returns:\n        (int): ID of the newly created Chore object.\n    \"\"\"\n    # Convert active_months IDs into Month instances\n    active_months = Month.objects.filter(id__in=payload.active_months)\n\n    # Create the Chore object\n    chore = Chore.objects.create(\n        chore_name=payload.chore_name,\n        area_id=payload.area_id,\n        intervalNumber=payload.intervalNumber,\n        unit=payload.unit,\n        effort=payload.effort,\n    )\n\n    # Set the active_months field\n    chore.active_months.set(active_months)\n\n    return {\"id\": chore.id}\n</code></pre>"},{"location":"api/#backend.api.get_chore","title":"<code>get_chore(request, chore_id)</code>","text":"<p>The function <code>get_chore</code> retrieves an Chore object.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/{chore_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to retreive.</p> required <p>Returns:</p> Type Description <code>ChoreOut</code> <p>The Chore object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/chores/{chore_id}\", response=ChoreOut)\ndef get_chore(request, chore_id: int):\n    \"\"\"\n    The function `get_chore` retrieves an Chore object.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/{chore_id}`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to retreive.\n\n    Returns:\n        (ChoreOut): The Chore object.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    return chore\n</code></pre>"},{"location":"api/#backend.api.list_chores","title":"<code>list_chores(request, inactive=False, timeframe=None, assignee_id=None, area_id=None)</code>","text":"<p>The function <code>list_chores</code> retrieves a list of Chore objects.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>inactive</code> <code>bool</code> <p>Toggle retreiving inactive chores. Default=False.</p> <code>False</code> <code>timeframe</code> <code>int</code> <p>Days from today to retrieve. Retreives all if None. Default=None.</p> <code>None</code> <code>assignee_id</code> <code>int</code> <p>Filter chores by assigned CustomUser ID. Retreives all if None. Default=None.</p> <code>None</code> <code>area_id</code> <code>int</code> <p>Filter chores by Area ID. Retreives all if None. Default=None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ChoreOut]</code> <p>List of Chore objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/chores\", response=List[ChoreOut])\ndef list_chores(\n    request,\n    inactive: bool = False,\n    timeframe: int = None,\n    assignee_id: int = None,\n    area_id: int = None,\n):\n    \"\"\"\n    The function `list_chores` retrieves a list of Chore objects.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        inactive (bool): Toggle retreiving inactive chores. Default=False.\n        timeframe (int): Days from today to retrieve. Retreives all if None. Default=None.\n        assignee_id (int): Filter chores by assigned CustomUser ID. Retreives all if None. Default=None.\n        area_id (int): Filter chores by Area ID. Retreives all if None. Default=None.\n\n    Returns:\n        (List[ChoreOut]): List of Chore objects.\n    \"\"\"\n    qs = Chore.objects.all().order_by(\n        \"status\", \"nextDue\", \"lastCompleted\", \"effort\", \"chore_name\", \"id\"\n    )\n    if not inactive:\n        qs = qs.filter(status=0)\n    if timeframe is not None:\n        today = timezone.now().date()\n        target_date = today\n        if timeframe &gt; 0:\n            target_date = today + timedelta(days=timeframe)\n        qs = qs.filter(nextDue__lte=target_date)\n    if assignee_id is not None:\n        qs = qs.filter(assignee_id=assignee_id)\n    if area_id is not None:\n        qs = qs.filter(area_id=area_id)\n    chore_list = []\n\n    for chore in qs:\n        active_months = list(chore.active_months.all())\n        active_month_ids = [month.id for month in active_months]\n        last_three_query = HistoryItem.objects.filter(chore=chore).order_by(\n            \"-completed_date\"\n        )[:3]\n        last_three = []\n        for item in last_three_query:\n            display_name = \"\"\n            if item.completed_by.fullname == \" \":\n                display_name = item.completed_by.email\n            else:\n                display_name = item.completed_by.fullname\n            last_three_object = LastHistoryItem(\n                completed_date=item.completed_date,\n                completed_by=display_name,\n            )\n            last_three.append(last_three_object)\n        chore_data = ChoreOut(\n            id=chore.id,\n            chore_name=chore.chore_name,\n            area_id=chore.area_id,\n            area=chore.area,  # Assuming AreaOut is a valid representation\n            nextDue=chore.nextDue,\n            lastCompleted=chore.lastCompleted,\n            intervalNumber=chore.intervalNumber,\n            unit=chore.unit,\n            active_months=active_month_ids,  # Set active_months to the list of IDs\n            assignee_id=chore.assignee_id,\n            assignee=chore.assignee,\n            effort=chore.effort,\n            vacationPause=chore.vacationPause,\n            expand=chore.expand,\n            dirtiness=chore.dirtiness,\n            duedays=chore.duedays,\n            last_three_history_items=last_three,\n            status=chore.status,\n        )\n        chore_list.append(chore_data)\n\n    return chore_list\n</code></pre>"},{"location":"api/#backend.api.update_chore","title":"<code>update_chore(request, chore_id, payload)</code>","text":"<p>The function <code>update_chore</code> updates a given Chore object.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/{chore_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to update.</p> required <code>payload</code> <code>ChoreIn</code> <p>Chore object with updates to apply.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/chores/{chore_id}\")\ndef update_chore(request, chore_id: int, payload: ChoreIn):\n    \"\"\"\n    The function `update_chore` updates a given Chore object.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/{chore_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to update.\n        payload (ChoreIn): Chore object with updates to apply.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    chore.chore_name = payload.chore_name\n    chore.area_id = payload.area_id\n    chore.status = payload.status\n    chore.nextDue = payload.nextDue\n    chore.lastCompleted = payload.lastCompleted\n    chore.intervalNumber = payload.intervalNumber\n    chore.unit = payload.unit\n    chore.active_months.set(payload.active_months)\n    chore.assignee_id = payload.assignee_id\n    chore.effort = payload.effort\n    chore.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_chore","title":"<code>delete_chore(request, chore_id)</code>","text":"<p>The function <code>delete_chore</code> deletes a given Chore object.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/{chore_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to delete.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/chores/{chore_id}\")\ndef delete_chore(request, chore_id: int):\n    \"\"\"\n    The function `delete_chore` deletes a given Chore object.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/{chore_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to delete.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    chore.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.toggle_vacation","title":"<code>toggle_vacation(request)</code>","text":"<p>The function <code>toggle_vacation</code> toggles vacation mode.</p> Endpoint <ul> <li>Path: <code>/api/v2/toggle_vacation</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns success if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/toggle_vacation\")\ndef toggle_vacation(request):\n    \"\"\"\n    The function `toggle_vacation` toggles vacation mode.\n\n    Endpoint:\n        - **Path**: `/api/v2/toggle_vacation`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (str): Returns success if successful.\n    \"\"\"\n    enabling = False\n    option = get_object_or_404(Option, id=1)\n    if option.vacation_mode:\n        enabling = False\n    else:\n        enabling = True\n    option.vacation_mode = not option.vacation_mode\n    option.save()\n    if enabling:\n        chores = Chore.objects.filter(status=0)\n        for chore in chores:\n            chore.status = 3\n            chore.vacationPause = chore.duedays\n            chore.save()\n    else:\n        chores = Chore.objects.filter(status=3)\n        for chore in chores:\n            chore.status = 0\n            chore.nextDue = date.today() + timedelta(days=chore.vacationPause)\n            chore.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.calculate_duedays","title":"<code>calculate_duedays(next_due)</code>","text":"<p>The function <code>calculate_duedays</code> calculates the days until due based on a given date.</p> <p>Parameters:</p> Name Type Description Default <code>next_due</code> <code>date</code> <p>The chore next due date.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The number of days until due date.</p> Source code in <code>backend/backend/api.py</code> <pre><code>def calculate_duedays(next_due):\n    \"\"\"\n    The function `calculate_duedays` calculates the days until due based on a given date.\n\n    Args:\n        next_due (date): The chore next due date.\n\n    Returns:\n        (int): The number of days until due date.\n    \"\"\"\n    delta = next_due - date.today()\n    return delta.days\n</code></pre>"},{"location":"api/#backend.api.toggle_chore","title":"<code>toggle_chore(request, chore_id, payload)</code>","text":"<p>The function <code>toggle_chore</code> toggles wether a Chore is active/inactive.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/togglechore/{chore_id}</code></li> <li>Method: <code>PATCH</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to update.</p> required <code>payload</code> <code>ToggleActive</code> <p>ToggleActive schema with status to set for the Chore.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.patch(\"/chores/togglechore/{chore_id}\")\ndef toggle_chore(request, chore_id: int, payload: TogglActive):\n    \"\"\"\n    The function `toggle_chore` toggles wether a Chore is active/inactive.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/togglechore/{chore_id}`\n        - **Method**: `PATCH`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to update.\n        payload (ToggleActive): ToggleActive schema with status to set for the Chore.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    chore.status = payload.status\n    chore.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.snooze_chore","title":"<code>snooze_chore(request, chore_id, payload)</code>","text":"<p>The function <code>snooze_chore</code> updates a given Chore object's next due date.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/snoozechore/{chore_id}</code></li> <li>Method: <code>PATCH</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to update.</p> required <code>payload</code> <code>SnoozeChore</code> <p>SnoozeChore schema with nextDue date to update chore with.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.patch(\"/chores/snoozechore/{chore_id}\")\ndef snooze_chore(request, chore_id: int, payload: SnoozeChore):\n    \"\"\"\n    The function `snooze_chore` updates a given Chore object's next due date.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/snoozechore/{chore_id}`\n        - **Method**: `PATCH`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to update.\n        payload (SnoozeChore): SnoozeChore schema with nextDue date to update chore with.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    chore.nextDue = payload.nextDue\n    chore.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.claim_chore","title":"<code>claim_chore(request, chore_id, payload)</code>","text":"<p>The function <code>claim_chore</code> assigns a given Chore object to a user.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/claimchore/{chore_id}</code></li> <li>Method: <code>PATCH</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to update.</p> required <code>payload</code> <code>ClaimChore</code> <p>ClaimChore schema with a CustomUser ID to assign to chore.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.patch(\"/chores/claimchore/{chore_id}\")\ndef claim_chore(request, chore_id: int, payload: ClaimChore):\n    \"\"\"\n    The function `claim_chore` assigns a given Chore object to a user.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/claimchore/{chore_id}`\n        - **Method**: `PATCH`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to update.\n        payload (ClaimChore): ClaimChore schema with a CustomUser ID to assign to chore.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    chore.assignee_id = payload.assignee_id\n    chore.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.complete_chore","title":"<code>complete_chore(request, chore_id, payload)</code>","text":"<p>The function <code>complete_chore</code> completes a given Chore object.</p> Endpoint <ul> <li>Path: <code>/api/v2/chores/completechore/{chore_id}</code></li> <li>Method: <code>PATCH</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>chore_id</code> <code>int</code> <p>ID of the Chore object to update.</p> required <code>payload</code> <code>CompleteChore</code> <p>CompleteChore schema to update Chore with.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.patch(\"/chores/completechore/{chore_id}\")\ndef complete_chore(request, chore_id: int, payload: CompleteChore):\n    \"\"\"\n    The function `complete_chore` completes a given Chore object.\n\n    Endpoint:\n        - **Path**: `/api/v2/chores/completechore/{chore_id}`\n        - **Method**: `PATCH`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        chore_id (int): ID of the Chore object to update.\n        payload (CompleteChore): CompleteChore schema to update Chore with.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    chore = get_object_or_404(Chore, id=chore_id)\n    chore.lastCompleted = payload.lastCompleted\n    if chore.unit == \"day(s)\":\n        chore.nextDue = payload.lastCompleted + relativedelta(\n            days=chore.intervalNumber\n        )\n    elif chore.unit == \"week(s)\":\n        chore.nextDue = payload.lastCompleted + relativedelta(\n            weeks=chore.intervalNumber\n        )\n    elif chore.unit == \"month(s)\":\n        chore.nextDue = payload.lastCompleted + relativedelta(\n            months=chore.intervalNumber\n        )\n    elif chore.unit == \"year(s)\":\n        chore.nextDue = payload.lastCompleted + relativedelta(\n            years=chore.intervalNumber\n        )\n    chore.assignee = None\n    chore.save()\n    HistoryItem.objects.create(\n        completed_date=payload.lastCompleted,\n        completed_by_id=payload.completed_by_id,\n        chore=chore,\n    )\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_4","title":"Schemas","text":""},{"location":"api/#backend.api.ChoreIn","title":"<code>ChoreIn</code>","text":"<p>Schema to represent a Chore.</p> <p>Attributes:</p> Name Type Description <code>chore_name</code> <code>str</code> <p>Name of the chore. Optional.</p> <code>area_id</code> <code>int</code> <p>ID of the area. Optional.</p> <code>intervalNumber</code> <code>int</code> <p>The repeat interval of the chore. Optional.</p> <code>unit</code> <code>str</code> <p>The repeat unit of the chore. Optional.</p> <code>active_months</code> <code>List[int]</code> <p>A list of month ids this chore is active. Optional.</p> <code>effort</code> <code>int</code> <p>The effort required for this chore. Optional.</p> <code>nextDue</code> <code>date</code> <p>The date chore is next due. Optional.</p> <code>lastCompleted</code> <code>date</code> <p>The date chore was last completed. Optional.</p> <code>assignee_id</code> <code>int</code> <p>ID of the assigned user. Optional.</p> <code>status</code> <code>int</code> <p>ID of the status. Optional.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ChoreIn(Schema):\n    \"\"\"\n    Schema to represent a Chore.\n\n    Attributes:\n        chore_name (str): Name of the chore. Optional.\n        area_id (int): ID of the area. Optional.\n        intervalNumber (int): The repeat interval of the chore. Optional.\n        unit (str): The repeat unit of the chore. Optional.\n        active_months (List[int]): A list of month ids this chore is active. Optional.\n        effort (int): The effort required for this chore. Optional.\n        nextDue (date): The date chore is next due. Optional.\n        lastCompleted (date): The date chore was last completed. Optional.\n        assignee_id (int): ID of the assigned user. Optional.\n        status (int): ID of the status. Optional.\n    \"\"\"\n\n    chore_name: Optional[str]\n    area_id: Optional[int]\n    intervalNumber: Optional[int]\n    unit: Optional[str]\n    active_months: Optional[List[int]]\n    effort: Optional[int]\n    nextDue: Optional[date]\n    lastCompleted: Optional[date]\n    assignee_id: Optional[int]\n    status: Optional[int]\n</code></pre>"},{"location":"api/#backend.api.ChoreOut","title":"<code>ChoreOut</code>","text":"<p>Schema to represent a Chore.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the chore.</p> <code>chore_name</code> <code>str</code> <p>Name of the chore.</p> <code>area_id</code> <code>int</code> <p>ID of an Area object assigned to the chore.</p> <code>area</code> <code>AreaOut</code> <p>Area object assigned to the chore.</p> <code>nextDue</code> <code>date</code> <p>Date chore is next due.</p> <code>lastCompleted</code> <code>date</code> <p>Date chore was last completed.</p> <code>intervalNumber</code> <code>int</code> <p>Repeat interval for the chore.</p> <code>unit</code> <code>str</code> <p>Repeat unit for the chore.</p> <code>active_months</code> <code>List[int]</code> <p>List of Month ids chode is active.</p> <code>assignee_id</code> <code>int</code> <p>ID of a user assigned to the chore. Default=None.</p> <code>effort</code> <code>int</code> <p>Effort required for the chore.</p> <code>vacationPause</code> <code>bool</code> <p>Due days when paused for vacation.</p> <code>expand</code> <code>bool</code> <p>Toggle expand menu in UI.</p> <code>dirtiness</code> <code>int</code> <p>Percentage dirty of the chore.</p> <code>duedays</code> <code>int</code> <p>Days until chore is due.</p> <code>last_three_history_items</code> <code>List[LastHistoryItem]</code> <p>List of 3 last history items of the chore.</p> <code>status</code> <code>int</code> <p>Status ID of the chore.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ChoreOut(Schema):\n    \"\"\"\n    Schema to represent a Chore.\n\n    Attributes:\n        id (int): ID of the chore.\n        chore_name (str): Name of the chore.\n        area_id (int): ID of an Area object assigned to the chore.\n        area (AreaOut): Area object assigned to the chore.\n        nextDue (date): Date chore is next due.\n        lastCompleted (date): Date chore was last completed.\n        intervalNumber (int): Repeat interval for the chore.\n        unit (str): Repeat unit for the chore.\n        active_months (List[int]): List of Month ids chode is active.\n        assignee_id (int): ID of a user assigned to the chore. Default=None.\n        effort (int): Effort required for the chore.\n        vacationPause (bool): Due days when paused for vacation.\n        expand (bool): Toggle expand menu in UI.\n        dirtiness (int): Percentage dirty of the chore.\n        duedays (int): Days until chore is due.\n        last_three_history_items (List[LastHistoryItem]): List of 3 last history items of the chore.\n        status (int): Status ID of the chore.\n    \"\"\"\n\n    id: int\n    chore_name: str\n    area_id: int\n    area: AreaOut\n    nextDue: date\n    lastCompleted: date\n    intervalNumber: int\n    unit: str\n    active_months: List[int]\n    assignee_id: Optional[int]\n    assignee: CustomUserSchema = None\n    effort: int\n    vacationPause: int\n    expand: bool\n    dirtiness: int\n    duedays: int\n    last_three_history_items: List[LastHistoryItem]\n    status: int\n</code></pre>"},{"location":"api/#backend.api.ChoreOutFull","title":"<code>ChoreOutFull</code>","text":"<p>Schema to represent a Chore with full Assigned User and no History.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the chore.</p> <code>chore_name</code> <code>str</code> <p>Name of the chore.</p> <code>area_id</code> <code>int</code> <p>ID of an Area object assigned to the chore.</p> <code>area</code> <code>AreaOut</code> <p>Area object assigned to the chore.</p> <code>nextDue</code> <code>date</code> <p>Date chore is next due.</p> <code>lastCompleted</code> <code>date</code> <p>Date chore was last completed.</p> <code>intervalNumber</code> <code>int</code> <p>Repeat interval for the chore.</p> <code>unit</code> <code>str</code> <p>Repeat unit for the chore.</p> <code>active_months</code> <code>List[int]</code> <p>List of Month ids chode is active.</p> <code>assignee_id</code> <code>int</code> <p>ID of a user assigned to the chore. Default=None.</p> <code>assignee</code> <code>CustomUserSchema</code> <p>CustomUser object of the assigned user. Default=None.</p> <code>effort</code> <code>int</code> <p>Effort required for the chore.</p> <code>vacationPause</code> <code>bool</code> <p>Due days when paused for vacation.</p> <code>expand</code> <code>bool</code> <p>Toggle expand menu in UI.</p> <code>dirtiness</code> <code>int</code> <p>Percentage dirty of the chore.</p> <code>duedays</code> <code>int</code> <p>Days until chore is due.</p> <code>status</code> <code>int</code> <p>Status ID of the chore.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ChoreOutFull(Schema):\n    \"\"\"\n    Schema to represent a Chore with full Assigned User and no History.\n\n    Attributes:\n        id (int): ID of the chore.\n        chore_name (str): Name of the chore.\n        area_id (int): ID of an Area object assigned to the chore.\n        area (AreaOut): Area object assigned to the chore.\n        nextDue (date): Date chore is next due.\n        lastCompleted (date): Date chore was last completed.\n        intervalNumber (int): Repeat interval for the chore.\n        unit (str): Repeat unit for the chore.\n        active_months (List[int]): List of Month ids chode is active.\n        assignee_id (int): ID of a user assigned to the chore. Default=None.\n        assignee (CustomUserSchema): CustomUser object of the assigned user. Default=None.\n        effort (int): Effort required for the chore.\n        vacationPause (bool): Due days when paused for vacation.\n        expand (bool): Toggle expand menu in UI.\n        dirtiness (int): Percentage dirty of the chore.\n        duedays (int): Days until chore is due.\n        status (int): Status ID of the chore.\n    \"\"\"\n\n    id: int\n    chore_name: str\n    area_id: int\n    area: AreaOut\n    nextDue: date\n    lastCompleted: date\n    intervalNumber: int\n    unit: str\n    active_months: List[MonthOut]\n    assignee_id: Optional[int]\n    assignee: CustomUserSchema = None\n    effort: int\n    vacationPause: int\n    expand: bool\n    dirtiness: int\n    duedays: int\n    status: int\n</code></pre>"},{"location":"api/#backend.api.TogglActive","title":"<code>TogglActive</code>","text":"<p>Schema to toggle a Chore status.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>int</code> <p>ID of a status object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class TogglActive(Schema):\n    \"\"\"\n    Schema to toggle a Chore status.\n\n    Attributes:\n        status (int): ID of a status object.\n    \"\"\"\n\n    status: int\n</code></pre>"},{"location":"api/#backend.api.CompleteChore","title":"<code>CompleteChore</code>","text":"<p>Schema to complete a Chore object.</p> <p>Attributes:</p> Name Type Description <code>lastCompleted</code> <code>date</code> <p>Date chore was completed.</p> <code>completed_by_id</code> <code>int</code> <p>ID of the user who completed chore.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class CompleteChore(Schema):\n    \"\"\"\n    Schema to complete a Chore object.\n\n    Attributes:\n        lastCompleted (date): Date chore was completed.\n        completed_by_id (int): ID of the user who completed chore.\n    \"\"\"\n\n    lastCompleted: date\n    completed_by_id: int\n</code></pre>"},{"location":"api/#backend.api.SnoozeChore","title":"<code>SnoozeChore</code>","text":"<p>Schema to snooze a chore object.</p> <p>Attributes:</p> Name Type Description <code>nextDue</code> <code>date</code> <p>Date to set nextDue to.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class SnoozeChore(Schema):\n    \"\"\"\n    Schema to snooze a chore object.\n\n    Attributes:\n        nextDue (date): Date to set nextDue to.\n    \"\"\"\n\n    nextDue: date\n</code></pre>"},{"location":"api/#backend.api.ClaimChore","title":"<code>ClaimChore</code>","text":"<p>Schema to claim a Chore.</p> <p>Attributes:</p> Name Type Description <code>assignee_id</code> <code>int</code> <p>ID of a user to assign to chore. Optional.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ClaimChore(Schema):\n    \"\"\"\n    Schema to claim a Chore.\n\n    Attributes:\n        assignee_id (int): ID of a user to assign to chore. Optional.\n    \"\"\"\n\n    assignee_id: Optional[int]\n</code></pre>"},{"location":"api/#historyitem","title":"HistoryItem","text":""},{"location":"api/#views_5","title":"Views","text":""},{"location":"api/#backend.api.create_historyitem","title":"<code>create_historyitem(request, payload)</code>","text":"<p>The function <code>create_historyitem</code> creates a new HistoryItem object.</p> Endpoint <ul> <li>Path: <code>/api/v2/historyitems</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>payload</code> <code>HistoryItemIn</code> <p>HistoryItem object to create.</p> required <p>Returns:</p> Type Description <code>int</code> <p>ID of the newly created HistoryItem object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/historyitems\")\ndef create_historyitem(request, payload: HistoryItemIn):\n    \"\"\"\n    The function `create_historyitem` creates a new HistoryItem object.\n\n    Endpoint:\n        - **Path**: `/api/v2/historyitems`\n        - **Method**: `POST`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        payload (HistoryItemIn): HistoryItem object to create.\n\n    Returns:\n        (int): ID of the newly created HistoryItem object.\n    \"\"\"\n    completed_by_id = payload.completed_by\n    completed_by_object = get_object_or_404(CustomUser, id=completed_by_id)\n    historyitem = HistoryItem.objects.create(\n        completed_date=payload.completed_date,\n        completed_by=completed_by_object,\n        chore_id=payload.chore_id,\n    )\n    return {\"id\": historyitem.id}\n</code></pre>"},{"location":"api/#backend.api.get_historyitem","title":"<code>get_historyitem(request, historyitem_id)</code>","text":"<p>The function <code>get_historyitem</code> retrieves an HistoryItem object.</p> Endpoint <ul> <li>Path: <code>/api/v2/historyitems/{historyitem_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>historyitem_id</code> <code>int</code> <p>ID of the HistoryItem object to retreive.</p> required <p>Returns:</p> Type Description <code>HistoryItemOut</code> <p>The HistoryItem object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/historyitems/{historyitem_id}\", response=HistoryItemOut)\ndef get_historyitem(request, historyitem_id: int):\n    \"\"\"\n    The function `get_historyitem` retrieves an HistoryItem object.\n\n    Endpoint:\n        - **Path**: `/api/v2/historyitems/{historyitem_id}`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        historyitem_id (int): ID of the HistoryItem object to retreive.\n\n    Returns:\n        (HistoryItemOut): The HistoryItem object.\n    \"\"\"\n    historyitem = get_object_or_404(HistoryItem, id=historyitem_id)\n    return historyitem\n</code></pre>"},{"location":"api/#backend.api.list_historyitems","title":"<code>list_historyitems(request, page=Query(1), page_size=Query(60))</code>","text":"<p>The function <code>list_historyitems</code> retrieves a list of HistoryItem objects.</p> Endpoint <ul> <li>Path: <code>/api/v2/historyitems</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>page</code> <code>int</code> <p>The page of the paginated History Items to return. Default=1. Optional.</p> <code>Query(1)</code> <code>page_size</code> <code>int</code> <p>The page size of paginated History Items. Default=60. Optional.</p> <code>Query(60)</code> <p>Returns:</p> Type Description <code>PaginatedHistoryItems</code> <p>Paginated List of HistoryItem objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/historyitems\", response=PaginatedHistoryItems)\ndef list_historyitems(\n    request,\n    page: Optional[int] = Query(1),\n    page_size: Optional[int] = Query(60),\n):\n    \"\"\"\n    The function `list_historyitems` retrieves a list of HistoryItem objects.\n\n    Endpoint:\n        - **Path**: `/api/v2/historyitems`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        page (int): The page of the paginated History Items to return. Default=1. Optional.\n        page_size (int): The page size of paginated History Items. Default=60. Optional.\n\n    Returns:\n        (PaginatedHistoryItems): Paginated List of HistoryItem objects.\n    \"\"\"\n    qs = HistoryItem.objects.all().order_by(\"-completed_date\", \"-id\")\n    total_pages = 0\n    item_list = []\n    if len(qs) &gt; 0:\n        paginator = Paginator(qs, page_size)\n        page_obj = paginator.page(page)\n        item_list = list(page_obj.object_list)\n        total_pages = paginator.num_pages\n    total_records = len(qs)\n    paginated_items = PaginatedHistoryItems(\n        items=item_list,\n        current_page=page,\n        total_pages=total_pages,\n        total_records=total_records,\n    )\n    return paginated_items\n</code></pre>"},{"location":"api/#backend.api.update_historyitem","title":"<code>update_historyitem(request, historyitem_id, payload)</code>","text":"<p>The function <code>update_historyitem</code> updates a given HistoryItem object.</p> Endpoint <ul> <li>Path: <code>/api/v2/historyitems/{historyitem_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>historyitem_id</code> <code>int</code> <p>ID of the HistoryItem object to update.</p> required <code>payload</code> <code>HistoryItemIn</code> <p>HistoryItem object with updates to apply.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/historyitems/{historyitem_id}\")\ndef update_historyitem(request, historyitem_id: int, payload: HistoryItemIn):\n    \"\"\"\n    The function `update_historyitem` updates a given HistoryItem object.\n\n    Endpoint:\n        - **Path**: `/api/v2/historyitems/{historyitem_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        historyitem_id (int): ID of the HistoryItem object to update.\n        payload (HistoryItemIn): HistoryItem object with updates to apply.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    historyitem = get_object_or_404(HistoryItem, id=historyitem_id)\n    historyitem.completed_date = payload.completed_date\n    historyitem.completed_by = payload.completed_by\n    historyitem.chore_id = payload.chore_id\n    historyitem.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_historyitem","title":"<code>delete_historyitem(request, historyitem_id)</code>","text":"<p>The function <code>delete_historyitem</code> deletes a given HistoryItem object.</p> Endpoint <ul> <li>Path: <code>/api/v2/historyitems/{historyitem_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>historyitem_id</code> <code>int</code> <p>ID of the HistoryItem object to delete.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/historyitems/{historyitem_id}\")\ndef delete_historyitem(request, historyitem_id: int):\n    \"\"\"\n    The function `delete_historyitem` deletes a given HistoryItem object.\n\n    Endpoint:\n        - **Path**: `/api/v2/historyitems/{historyitem_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        historyitem_id (int): ID of the HistoryItem object to delete.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    historyitem = get_object_or_404(HistoryItem, id=historyitem_id)\n    historyitem.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_5","title":"Schemas","text":""},{"location":"api/#backend.api.HistoryItemIn","title":"<code>HistoryItemIn</code>","text":"<p>Schema to represent a HistoryItem.</p> <p>Attributes:</p> Name Type Description <code>completed_date</code> <code>date</code> <p>The date the chore was completed.</p> <code>completed_by</code> <code>str</code> <p>A name of the user who completed the chore.</p> <code>chore_id</code> <code>int</code> <p>ID of the chore completed.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class HistoryItemIn(Schema):\n    \"\"\"\n    Schema to represent a HistoryItem.\n\n    Attributes:\n        completed_date (date): The date the chore was completed.\n        completed_by (str): A name of the user who completed the chore.\n        chore_id (int): ID of the chore completed.\n    \"\"\"\n\n    completed_date: date\n    completed_by: int\n    chore_id: int\n</code></pre>"},{"location":"api/#backend.api.HistoryItemOut","title":"<code>HistoryItemOut</code>","text":"<p>Schema to represent a HistoryItem.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the HistoryItem.</p> <code>completed_date</code> <code>date</code> <p>The date the chore was completed.</p> <code>completed_by</code> <code>CustomUserSchema</code> <p>Object of the user who completed chore.</p> <code>chore</code> <code>ChoreOutFull</code> <p>Object of the chore completed.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class HistoryItemOut(Schema):\n    \"\"\"\n    Schema to represent a HistoryItem.\n\n    Attributes:\n        id (int): ID of the HistoryItem.\n        completed_date (date): The date the chore was completed.\n        completed_by (CustomUserSchema): Object of the user who completed chore.\n        chore (ChoreOutFull): Object of the chore completed.\n    \"\"\"\n\n    id: int\n    completed_date: date\n    completed_by: CustomUserSchema\n    chore: ChoreOutFull\n</code></pre>"},{"location":"api/#backend.api.LastHistoryItem","title":"<code>LastHistoryItem</code>","text":"<p>Schema to represent the last History Item for a chore.</p> <p>Attributes:</p> Name Type Description <code>completed_date</code> <code>date</code> <p>The date the chore was completed.</p> <code>completed_by</code> <code>str</code> <p>A name of the user who completed the chore.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class LastHistoryItem(Schema):\n    \"\"\"\n    Schema to represent the last History Item for a chore.\n\n    Attributes:\n        completed_date (date): The date the chore was completed.\n        completed_by (str): A name of the user who completed the chore.\n    \"\"\"\n\n    completed_date: date\n    completed_by: str\n</code></pre>"},{"location":"api/#backend.api.PaginatedHistoryItems","title":"<code>PaginatedHistoryItems</code>","text":"<p>Schema to represent a paginated list of HistoryItems.</p> <p>Attributes:</p> Name Type Description <code>items</code> <code>List[HistoryItemOut]</code> <p>List of HistoryItem objects.</p> <code>current_page</code> <code>int</code> <p>Page number of current record set.</p> <code>total_pages</code> <code>int</code> <p>Total number of pages.</p> <code>total_records</code> <code>int</code> <p>Total numboer of HistoryItems.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class PaginatedHistoryItems(Schema):\n    \"\"\"\n    Schema to represent a paginated list of HistoryItems.\n\n    Attributes:\n        items (List[HistoryItemOut]): List of HistoryItem objects.\n        current_page (int): Page number of current record set.\n        total_pages (int): Total number of pages.\n        total_records (int): Total numboer of HistoryItems.\n    \"\"\"\n\n    items: List[HistoryItemOut]\n    current_page: int\n    total_pages: int\n    total_records: int\n</code></pre>"},{"location":"api/#option","title":"Option","text":""},{"location":"api/#views_6","title":"Views","text":""},{"location":"api/#backend.api.get_option","title":"<code>get_option(request, option_id)</code>","text":"<p>The function <code>get_option</code> retrieves an Option object.</p> Endpoint <ul> <li>Path: <code>/api/v2/options/{option_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>option_id</code> <code>int</code> <p>ID of the Option object to retreive.</p> required <p>Returns:</p> Type Description <code>OptionOut</code> <p>The Option object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/options/{option_id}\", response=OptionOut)\ndef get_option(request, option_id: int):\n    \"\"\"\n    The function `get_option` retrieves an Option object.\n\n    Endpoint:\n        - **Path**: `/api/v2/options/{option_id}`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        option_id (int): ID of the Option object to retreive.\n\n    Returns:\n        (OptionOut): The Option object.\n    \"\"\"\n    option = get_object_or_404(Option, id=option_id)\n    return option\n</code></pre>"},{"location":"api/#backend.api.list_options","title":"<code>list_options(request)</code>","text":"<p>The function <code>list_options</code> retrieves a list of Option objects.</p> Endpoint <ul> <li>Path: <code>/api/v2/options</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>List[OptionOut]</code> <p>List of Option objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/options\", response=List[OptionOut])\ndef list_options(request):\n    \"\"\"\n    The function `list_options` retrieves a list of Option objects.\n\n    Endpoint:\n        - **Path**: `/api/v2/options`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (List[OptionOut]): List of Option objects.\n    \"\"\"\n    qs = Option.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_option","title":"<code>update_option(request, option_id, payload)</code>","text":"<p>The function <code>update_option</code> updates a given Option object.</p> Endpoint <ul> <li>Path: <code>/api/v2/options/{option_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>option_id</code> <code>int</code> <p>ID of the Option object to update.</p> required <code>payload</code> <code>OptionIn</code> <p>Option object with updates to apply.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns <code>success</code> if successful.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/options/{option_id}\")\ndef update_option(request, option_id: int, payload: OptionIn):\n    \"\"\"\n    The function `update_option` updates a given Option object.\n\n    Endpoint:\n        - **Path**: `/api/v2/options/{option_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        option_id (int): ID of the Option object to update.\n        payload (OptionIn): Option object with updates to apply.\n\n    Returns:\n        (str): Returns `success` if successful.\n    \"\"\"\n    option = get_object_or_404(Option, id=option_id)\n    option.vacation_mode = payload.vacation_mode\n    option.med_thresh = payload.med_thresh\n    option.high_thresh = payload.high_thresh\n    option.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_6","title":"Schemas","text":""},{"location":"api/#backend.api.OptionIn","title":"<code>OptionIn</code>","text":"<p>Schema to represent an Option object.</p> <p>Attributes:</p> Name Type Description <code>vacation_mode</code> <code>bool</code> <p>Toggle for vacation mode.</p> <code>med_thresh</code> <code>int</code> <p>Medium dirtiness threshold.</p> <code>high_thresh</code> <code>int</code> <p>High dirtiness threshold.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class OptionIn(Schema):\n    \"\"\"\n    Schema to represent an Option object.\n\n    Attributes:\n        vacation_mode (bool): Toggle for vacation mode.\n        med_thresh (int): Medium dirtiness threshold.\n        high_thresh (int): High dirtiness threshold.\n    \"\"\"\n\n    vacation_mode: bool\n    med_thresh: int\n    high_thresh: int\n</code></pre>"},{"location":"api/#backend.api.OptionOut","title":"<code>OptionOut</code>","text":"<p>Schema to represent an Option object.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the Option object.</p> <code>vacation_mode</code> <code>bool</code> <p>Toggle for vacation mode.</p> <code>med_thresh</code> <code>int</code> <p>Medium dirtiness threshold.</p> <code>high_thresh</code> <code>int</code> <p>High dirtiness threshold.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class OptionOut(Schema):\n    \"\"\"\n    Schema to represent an Option object.\n\n    Attributes:\n        id (int): ID of the Option object.\n        vacation_mode (bool): Toggle for vacation mode.\n        med_thresh (int): Medium dirtiness threshold.\n        high_thresh (int): High dirtiness threshold.\n    \"\"\"\n\n    id: int\n    vacation_mode: bool\n    med_thresh: int\n    high_thresh: int\n</code></pre>"},{"location":"api/#version","title":"Version","text":""},{"location":"api/#views_7","title":"Views","text":""},{"location":"api/#backend.api.list_version","title":"<code>list_version(request)</code>","text":"<p>The function <code>list_version</code> retrieves the app version number from the backend.</p> Endpoint <ul> <li>Path: <code>/api/v2/version/list</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Name Type Description <code>VersionOut</code> <p>a version object</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/version/list\", response=VersionOut)\ndef list_version(request):\n    \"\"\"\n    The function `list_version` retrieves the app version number\n    from the backend.\n\n    Endpoint:\n        - **Path**: `/api/v2/version/list`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        VersionOut: a version object\n    \"\"\"\n\n    try:\n        qs = get_object_or_404(Version, id=1)\n        return qs\n    except Exception as e:\n        raise HttpError(500, f\"Record retrieval error: {str(e)}\")\n</code></pre>"},{"location":"api/#schemas_7","title":"Schemas","text":""},{"location":"api/#backend.api.VersionOut","title":"<code>VersionOut</code>","text":"<p>Schema to represent a Version.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID integer. Unique.</p> <code>version_number</code> <code>str</code> <p>The version of the app.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class VersionOut(Schema):\n    \"\"\"\n    Schema to represent a Version.\n\n    Attributes:\n        id (int): ID integer. Unique.\n        version_number (str): The version of the app.\n    \"\"\"\n\n    id: int\n    version_number: str\n</code></pre>"},{"location":"api/#graphs","title":"Graphs","text":""},{"location":"api/#views_8","title":"Views","text":""},{"location":"api/#backend.api.get_weeklytotals","title":"<code>get_weeklytotals(request, week=0)</code>","text":"<p>The function <code>get_weeklytotals</code> retrieves the weekly totals.</p> Endpoint <ul> <li>Path: <code>/api/v2/weeklytotals</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>week</code> <code>int</code> <p>Flag to indicate if the totals for last week should be retrieved. Default=0.</p> <code>0</code> <p>Returns:</p> Type Description <code>GraphData</code> <p>The graph data with labels and datasets.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/weeklytotals\", response=GraphData)\ndef get_weeklytotals(request, week: Optional[int] = 0):\n    \"\"\"\n    The function `get_weeklytotals` retrieves the weekly totals.\n\n    Endpoint:\n        - **Path**: `/api/v2/weeklytotals`\n        - **Method**: `GET`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        week (int): Flag to indicate if the totals for last week should be retrieved. Default=0.\n\n    Returns:\n        (GraphData): The graph data with labels and datasets.\n    \"\"\"\n    labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n    today = timezone.now().date()\n    days = week * 7\n    start_of_week = (\n        today - timedelta(days=today.weekday()) - timedelta(days=days)\n    )\n    end_of_week = start_of_week + timedelta(days=6)\n\n    datasets = []\n    users = CustomUser.objects.all()\n    for user in users:\n        user_name = None\n        if user.first_name and user.first_name != \"\":\n            user_name = user.first_name\n        else:\n            if len(user.email) &gt; 15:\n                if \"@\" in user.email:\n                    parts = user.email.split(\"@\")\n                    if len(parts[0]) &lt;= 9:\n                        user_name = parts[0] + \"@\"\n                    else:\n                        user_name = parts[0][:8] + \"*@\"\n                    if len(parts[1]) &lt;= 5:\n                        user_name += parts[1]\n                    else:\n                        user_name += parts[1][:4] + \"*\"\n                else:\n                    user_name = user.email[:14] + \"*\"\n            else:\n                user_name = user.email\n        # Get records for this week or last week\n        records_this_week = HistoryItem.objects.filter(\n            completed_by=user,\n            completed_date__gte=start_of_week,\n            completed_date__lt=start_of_week + timedelta(days=7),\n        )\n\n        # Aggregate counts by date\n        daily_counts = records_this_week.values(\"completed_date\").annotate(\n            count=Count(\"id\")\n        )\n\n        # Initialize weekly counts with 0s\n        weekly_counts = [0] * 7\n\n        # Map counts to the correct day of the week\n        for record in daily_counts:\n            day_index = (record[\"completed_date\"] - start_of_week).days\n            weekly_counts[day_index] = record[\"count\"]\n\n        dataset_obj = DatasetObject(\n            backgroundColor=user.user_color,\n            data=weekly_counts,\n            label=user_name,\n        )\n        datasets.append(dataset_obj)\n    title = (\n        start_of_week.strftime(\"%m/%d\") + \" to \" + end_of_week.strftime(\"%m/%d\")\n    )\n    graph = GraphData(labels=labels, datasets=datasets, title=title)\n    return graph\n</code></pre>"},{"location":"api/#schemas_8","title":"Schemas","text":""},{"location":"api/#backend.api.DatasetObject","title":"<code>DatasetObject</code>","text":"<p>Schema to represent a graph DataSet object.</p> <p>Attributes:</p> Name Type Description <code>backgroundColor</code> <code>str</code> <p>Hex value of the graph color. Optional.</p> <code>data</code> <code>List(int</code> <p>List of object IDs for the graph.</p> <code>label</code> <code>str</code> <p>Label for the gaph dataset.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class DatasetObject(Schema):\n    \"\"\"\n    Schema to represent a graph DataSet object.\n\n    Attributes:\n        backgroundColor (str): Hex value of the graph color. Optional.\n        data (List(int)): List of object IDs for the graph.\n        label (str): Label for the gaph dataset.\n    \"\"\"\n\n    backgroundColor: Optional[str]\n    data: Optional[List[int]]\n    label: Optional[str]\n</code></pre>"},{"location":"api/#backend.api.GraphData","title":"<code>GraphData</code>","text":"<p>Schema to represent a GraphData object.</p> <p>Attributes:</p> Name Type Description <code>labels</code> <code>List[str]</code> <p>List of labels for the graph data.</p> <code>datasets</code> <code>List[DatasetObject]</code> <p>List of DataSetObject objects.</p> <code>title</code> <code>str</code> <p>Title of the graph.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class GraphData(Schema):\n    \"\"\"\n    Schema to represent a GraphData object.\n\n    Attributes:\n        labels (List[str]): List of labels for the graph data.\n        datasets (List[DatasetObject]): List of DataSetObject objects.\n        title (str): Title of the graph.\n    \"\"\"\n\n    labels: List[str]\n    datasets: List[DatasetObject]\n    title: str\n</code></pre>"},{"location":"models/","title":"Models","text":""},{"location":"models/#dependencies","title":"Dependencies","text":""},{"location":"models/#api.models.SingletonModel","title":"<code>SingletonModel</code>","text":"<p>Model representing a singleton model.</p> <p>Attributes:</p> Source code in <code>backend/api/models.py</code> <pre><code>class SingletonModel(models.Model):\n    \"\"\"\n    Model representing a singleton model.\n\n    Attributes:\n    \"\"\"\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Override save method to validate only one instance exists.\n        \"\"\"\n        if not self.pk and self.__class__.objects.exists():\n            raise ValidationError(\"There is already one instance of this model\")\n        return super(SingletonModel, self).save(*args, **kwargs)\n\n    def delete(self, *args, **kwargs):\n        \"\"\"\n        Override delete method to block deletes.\n        \"\"\"\n        raise ValidationError(\"You cannot delete this object\")\n</code></pre>"},{"location":"models/#api.models.SingletonModel.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Override save method to validate only one instance exists.</p> Source code in <code>backend/api/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"\n    Override save method to validate only one instance exists.\n    \"\"\"\n    if not self.pk and self.__class__.objects.exists():\n        raise ValidationError(\"There is already one instance of this model\")\n    return super(SingletonModel, self).save(*args, **kwargs)\n</code></pre>"},{"location":"models/#api.models.SingletonModel.delete","title":"<code>delete(*args, **kwargs)</code>","text":"<p>Override delete method to block deletes.</p> Source code in <code>backend/api/models.py</code> <pre><code>def delete(self, *args, **kwargs):\n    \"\"\"\n    Override delete method to block deletes.\n    \"\"\"\n    raise ValidationError(\"You cannot delete this object\")\n</code></pre>"},{"location":"models/#api.models.CustomUser","title":"<code>CustomUser</code>","text":"<p>Custom user object using AbstractUser.</p> <p>Attributes:</p> Name Type Description <code>username</code> <p>The username of the user.</p> <code>email</code> <code>EmailField</code> <p>The email of the user. Unique.</p> <code>profile_picture</code> <code>ImageField</code> <p>An image to use as the user profile picture.</p> <code>male</code> <code>BooleanField</code> <p>True if the user is male.</p> <code>user_color</code> <code>ColorField</code> <p>A color used to represent the user.</p> Source code in <code>backend/api/models.py</code> <pre><code>class CustomUser(AbstractUser):\n    \"\"\"\n    Custom user object using AbstractUser.\n\n    Attributes:\n        username (): The username of the user.\n        email (EmailField): The email of the user. Unique.\n        profile_picture (ImageField): An image to use as the user profile\n            picture.\n        male (BooleanField): True if the user is male.\n        user_color (ColorField): A color used to represent the user.\n    \"\"\"\n\n    COLOR_PALETTE = [\n        (\"#E91E63\", \"Color1\"),\n        (\"#3F51B5\", \"Color2\"),\n        (\"#009688\", \"Color3\"),\n        (\"#CDDC39\", \"Color4\"),\n    ]\n    username = None\n    email = models.EmailField(\"email address\", unique=True)\n    profile_picture = models.ImageField(\n        upload_to=user_profile_picture_upload, blank=True, null=True\n    )\n    male = models.BooleanField(default=True)\n    user_color = ColorField(default=\"#E91E63\", samples=COLOR_PALETTE)\n\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS = []\n\n    objects = CustomUserManager()\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The user's email address.\n        \"\"\"\n        return self.email\n\n    @property\n    def fullname(self):\n        fullname = self.first_name + \" \" + self.last_name\n        return fullname\n</code></pre>"},{"location":"models/#api.models.CustomUser.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The user's email address.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The user's email address.\n    \"\"\"\n    return self.email\n</code></pre>"},{"location":"models/#area-group","title":"Area Group","text":""},{"location":"models/#api.models.AreaGroup","title":"<code>AreaGroup</code>","text":"<p>Model representing an area group.</p> <p>Attributes:</p> Name Type Description <code>group_name</code> <code>CharField</code> <p>The name of the group. Max=254.</p> <code>group_order</code> <code>IntegerField</code> <p>The order index of the group. Default=1.</p> <code>group_color</code> <code>CharField</code> <p>A hex value of a color to represent the group. Max=12.</p> Source code in <code>backend/api/models.py</code> <pre><code>class AreaGroup(models.Model):\n    \"\"\"\n    Model representing an area group.\n\n    Attributes:\n        group_name (CharField): The name of the group. Max=254.\n        group_order (IntegerField): The order index of the group. Default=1.\n        group_color (CharField): A hex value of a color to represent the group. Max=12.\n    \"\"\"\n\n    group_name = models.CharField(max_length=254)\n    group_order = models.IntegerField(default=1)\n    group_color = models.CharField(max_length=12)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The area group name.\n        \"\"\"\n        return self.group_name\n</code></pre>"},{"location":"models/#api.models.AreaGroup.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The area group name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The area group name.\n    \"\"\"\n    return self.group_name\n</code></pre>"},{"location":"models/#area","title":"Area","text":""},{"location":"models/#api.models.Area","title":"<code>Area</code>","text":"<p>Model representing an area.</p> <p>Attributes:</p> Name Type Description <code>area_name</code> <code>CharField</code> <p>The name of a store. Max=254</p> <code>area_icon</code> <code>CharField</code> <p>The name of an icon to use. Max=254</p> <code>group</code> <code>AreaGroup</code> <p>An area group object.</p> <code>area_order</code> <code>IntegerField</code> <p>The order index of the area.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Area(models.Model):\n    \"\"\"\n    Model representing an area.\n\n    Attributes:\n        area_name (CharField): The name of a store. Max=254\n        area_icon (CharField): The name of an icon to use. Max=254\n        group (AreaGroup): An area group object.\n        area_order (IntegerField): The order index of the area.\n    \"\"\"\n\n    area_name = models.CharField(max_length=254)\n    area_icon = models.CharField(max_length=254)\n    group = models.ForeignKey(\n        AreaGroup, null=True, on_delete=models.SET_DEFAULT, default=1\n    )\n    area_order = models.IntegerField(default=1)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Area Object name.\n        \"\"\"\n        return self.area_name\n\n    @property\n    def dirtiness(self):\n        \"\"\"\n        Calculates the dirtiness percentage of an area.\n\n        Returns:\n            percentage (integer): The dirtiness of an area as a percentage.\n        \"\"\"\n        total_dirtiness = self.total_dirtiness()\n        total_chores = self.chore_set.filter(status=0).count()\n\n        if total_chores &gt; 0:\n            # Calculate the percentage if there are chores\n            percentage = total_dirtiness / total_chores\n            perecentage = round(percentage)\n        else:\n            # Handle the case when there are no chores\n            percentage = 0\n\n        return percentage\n\n    @property\n    def dueCount(self):\n        \"\"\"\n        Determines the number of chores due for this area.\n\n        Returns:\n            count (integer): The count of chores due for this area.\n        \"\"\"\n        today = date.today().isoformat()\n        count = self.chore_set.filter(status=0, nextDue__lte=today).count()\n        return count\n\n    @property\n    def totalCount(self):\n        \"\"\"\n        Calculates the total chores in this area.\n\n        Returns:\n            count (integer): The total count of chores for this area.\n        \"\"\"\n        count = self.chore_set.filter(status=0).count()\n        return count\n\n    def total_dirtiness(self):\n        \"\"\"\n        Returns:\n            total (integer): The total dirtiness of an area.\n        \"\"\"\n        total = sum(\n            chore.dirtiness for chore in self.chore_set.filter(status=0)\n        )\n        return total\n</code></pre>"},{"location":"models/#api.models.Area.dirtiness","title":"<code>dirtiness</code>  <code>property</code>","text":"<p>Calculates the dirtiness percentage of an area.</p> <p>Returns:</p> Name Type Description <code>percentage</code> <code>integer</code> <p>The dirtiness of an area as a percentage.</p>"},{"location":"models/#api.models.Area.dueCount","title":"<code>dueCount</code>  <code>property</code>","text":"<p>Determines the number of chores due for this area.</p> <p>Returns:</p> Name Type Description <code>count</code> <code>integer</code> <p>The count of chores due for this area.</p>"},{"location":"models/#api.models.Area.totalCount","title":"<code>totalCount</code>  <code>property</code>","text":"<p>Calculates the total chores in this area.</p> <p>Returns:</p> Name Type Description <code>count</code> <code>integer</code> <p>The total count of chores for this area.</p>"},{"location":"models/#api.models.Area.total_dirtiness","title":"<code>total_dirtiness()</code>","text":"<p>Returns:</p> Name Type Description <code>total</code> <code>integer</code> <p>The total dirtiness of an area.</p> Source code in <code>backend/api/models.py</code> <pre><code>def total_dirtiness(self):\n    \"\"\"\n    Returns:\n        total (integer): The total dirtiness of an area.\n    \"\"\"\n    total = sum(\n        chore.dirtiness for chore in self.chore_set.filter(status=0)\n    )\n    return total\n</code></pre>"},{"location":"models/#month","title":"Month","text":""},{"location":"models/#api.models.Month","title":"<code>Month</code>","text":"<p>Model representing a month.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>The name of the month. Max=20</p> Source code in <code>backend/api/models.py</code> <pre><code>class Month(models.Model):\n    \"\"\"\n    Model representing a month.\n\n    Attributes:\n        name (CharField): The name of the month. Max=20\n    \"\"\"\n\n    name = models.CharField(max_length=20)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Month Object name.\n        \"\"\"\n        return self.name\n</code></pre>"},{"location":"models/#api.models.Month.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Month Object name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Month Object name.\n    \"\"\"\n    return self.name\n</code></pre>"},{"location":"models/#chore","title":"Chore","text":""},{"location":"models/#api.models.Chore","title":"<code>Chore</code>","text":"<p>Model representing a month.</p> <p>Attributes:</p> Name Type Description <code>chore_name</code> <code>CharField</code> <p>The name of the chore. Max=254</p> <code>area</code> <code>Area</code> <p>An area object.</p> <code>nextDue</code> <code>DateField</code> <p>The date chore is next due. Default=Today</p> <code>lastCompleted</code> <code>DateField</code> <p>The date chore was last completed. Default=Today.</p> <code>intervalNumber</code> <code>integer</code> <p>The repeat interval. Default=1.</p> <code>unit</code> <code>CharField</code> <p>The unit of the repeat intervals. Default=\"day(s)\".</p> <code>active_months</code> <code>Month</code> <p>An array of Months chore is active.</p> <code>assignee</code> <code>CustomUser</code> <p>A CustomUser object assigned to chore. Default=None.</p> <code>effort</code> <code>IntegerField</code> <p>How difficult the task is. Default=0.</p> <code>vacationPause</code> <code>IntegerField</code> <p>Default=0.</p> <code>expand</code> <code>BooleanField</code> <p>Default=False.</p> <code>status</code> <code>IntegerField</code> <p>The status of the chore. Default=0.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Chore(models.Model):\n    \"\"\"\n    Model representing a month.\n\n    Attributes:\n        chore_name (CharField): The name of the chore. Max=254\n        area (Area): An area object.\n        nextDue (DateField): The date chore is next due. Default=Today\n        lastCompleted (DateField): The date chore was last completed. Default=Today.\n        intervalNumber (integer): The repeat interval. Default=1.\n        unit (CharField): The unit of the repeat intervals. Default=\"day(s)\".\n        active_months (Month): An array of Months chore is active.\n        assignee (CustomUser): A CustomUser object assigned to chore. Default=None.\n        effort (IntegerField): How difficult the task is. Default=0.\n        vacationPause (IntegerField): Default=0.\n        expand (BooleanField): Default=False.\n        status (IntegerField): The status of the chore. Default=0.\n    \"\"\"\n\n    chore_name = models.CharField(max_length=254)\n    area = models.ForeignKey(Area, null=True, on_delete=models.CASCADE)\n    nextDue = models.DateField(default=date.today)\n    lastCompleted = models.DateField(default=date.today)\n    intervalNumber = models.IntegerField(default=1)\n    unit = models.CharField(max_length=10, default=\"day(s)\")\n    active_months = models.ManyToManyField(Month)\n    assignee = models.ForeignKey(\n        CustomUser,\n        null=True,\n        on_delete=models.SET_NULL,\n        blank=True,\n        default=None,\n    )\n    effort = models.IntegerField(default=0)\n    vacationPause = models.IntegerField(default=0)\n    expand = models.BooleanField(default=False)\n    status = models.IntegerField(default=0)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Chore Object name.\n        \"\"\"\n        return self.chore_name\n\n    @property\n    def dirtiness(self):\n        \"\"\"\n        Calculates how dirty the chore is.\n\n        Returns:\n            dirtiness (integer): The dirtiness of the chore.\n        \"\"\"\n        timesincedone = self.lastCompleted - date.today()\n        timeperiod = self.lastCompleted - self.nextDue\n        if timeperiod.days == 0:\n            dirtiness = 0\n        else:\n            dirtiness = round((timesincedone.days / timeperiod.days) * 100)\n            if dirtiness &gt; 100:\n                dirtiness = 100\n        return dirtiness\n\n    @property\n    def duedays(self):\n        \"\"\"\n        Calculates the days until chore is due.\n\n        Returns:\n            (integer): The days until chore is due.\n        \"\"\"\n        delta = self.nextDue - date.today()\n        return delta.days\n</code></pre>"},{"location":"models/#api.models.Chore.dirtiness","title":"<code>dirtiness</code>  <code>property</code>","text":"<p>Calculates how dirty the chore is.</p> <p>Returns:</p> Name Type Description <code>dirtiness</code> <code>integer</code> <p>The dirtiness of the chore.</p>"},{"location":"models/#api.models.Chore.duedays","title":"<code>duedays</code>  <code>property</code>","text":"<p>Calculates the days until chore is due.</p> <p>Returns:</p> Type Description <code>integer</code> <p>The days until chore is due.</p>"},{"location":"models/#historyitem","title":"HistoryItem","text":""},{"location":"models/#api.models.HistoryItem","title":"<code>HistoryItem</code>","text":"<p>Model representing a history item for a chore.</p> <p>Attributes:</p> Name Type Description <code>completed_date</code> <code>DateField</code> <p>The date a chore was completed. Default=Today.</p> <code>completed_by</code> <code>CustomUser</code> <p>The user object who completed the chore.</p> <code>chore</code> <code>Chore</code> <p>The chore object.</p> Source code in <code>backend/api/models.py</code> <pre><code>class HistoryItem(models.Model):\n    \"\"\"\n    Model representing a history item for a chore.\n\n    Attributes:\n        completed_date (DateField): The date a chore was completed. Default=Today.\n        completed_by (CustomUser): The user object who completed the chore.\n        chore (Chore): The chore object.\n    \"\"\"\n\n    completed_date = models.DateField(default=date.today)\n    completed_by = models.ForeignKey(\n        CustomUser, null=True, on_delete=models.SET_NULL\n    )\n    chore = models.ForeignKey(Chore, on_delete=models.CASCADE)\n</code></pre>"},{"location":"models/#option","title":"Option","text":""},{"location":"models/#api.models.Option","title":"<code>Option</code>","text":"<p>Model representing an option.</p> <p>Attributes:</p> Name Type Description <code>vacation_mode</code> <code>BooleanField</code> <p>Is vacation mode active or not. Default=False.</p> <code>med_thresh</code> <code>IntegerField</code> <p>The medium threshold for dirtiness. Default=50.</p> <code>high_thresh</code> <code>IntegerField</code> <p>The high threshold for dirtiness. Default=50.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Option(SingletonModel):\n    \"\"\"\n    Model representing an option.\n\n    Attributes:\n        vacation_mode (BooleanField): Is vacation mode active or not. Default=False.\n        med_thresh (IntegerField): The medium threshold for dirtiness. Default=50.\n        high_thresh (IntegerField): The high threshold for dirtiness. Default=50.\n    \"\"\"\n\n    vacation_mode = models.BooleanField(default=False)\n    med_thresh = models.IntegerField(default=50)\n    high_thresh = models.IntegerField(default=50)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The option object.\n        \"\"\"\n        return \"Options\"\n\n    @classmethod\n    def load(cls):\n        return cls.objects.first()\n</code></pre>"},{"location":"models/#api.models.Option.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The option object.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The option object.\n    \"\"\"\n    return \"Options\"\n</code></pre>"},{"location":"models/#version","title":"Version","text":""},{"location":"models/#api.models.Version","title":"<code>Version</code>","text":"<p>Model representing app version.</p> <p>Fields: - version_number (CharField): The current version of the app.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Version(SingletonModel):\n    \"\"\"\n    Model representing app version.\n\n    Fields:\n    - version_number (CharField): The current version of the app.\n    \"\"\"\n\n    version_number = models.CharField(max_length=10)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The app version number.\n        \"\"\"\n        return self.version_number\n</code></pre>"},{"location":"models/#api.models.Version.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The app version number.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The app version number.\n    \"\"\"\n    return self.version_number\n</code></pre>"}]}